diff --git a/include/drivers/gpio.h b/include/drivers/gpio.h
index 857e39d0de..4ec7f8cf03 100644
--- a/include/drivers/gpio.h
+++ b/include/drivers/gpio.h
@@ -492,6 +492,12 @@ struct gpio_driver_data {
 	 * wrapper functions in this header.
 	 */
 	gpio_port_pins_t invert;
+	/*
+	 * Mask identifying pins that are configured as output
+	 * Management of this mask is the responsibility of the
+	 * wrapper functions in this header.
+	 */
+	gpio_port_pins_t output;
 };
 
 struct gpio_callback;
@@ -752,6 +758,12 @@ static inline int z_impl_gpio_pin_configure(const struct device *port,
 	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 		 "Unsupported pin");
 
+	if (flags & GPIO_OUTPUT) {
+		data->output |= BIT(pin);
+	} else if (flags & GPIO_INPUT) {
+		data->output &= ~BIT(pin);
+	}
+
 	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 		data->invert |= (gpio_port_pins_t)BIT(pin);
 	} else {
@@ -780,6 +792,30 @@ static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
 				  spec->dt_flags | extra_flags);
 }
 
+/**
+ * @brief Get physical direction of a single @p pin in a @p port
+ *
+ * This function returns true if the given pin is configured as
+ * @ref GPIO_OUTPUT. Otherwise, this function returns false.
+ *
+ * @param port Pointer to device structure for the driver instance.
+ * @param pin Pin number to query the direction of
+ * @return the direction of the pin
+ */
+static inline bool gpio_pin_get_direction(const struct device *port, gpio_pin_t pin)
+{
+	const struct gpio_driver_config *const cfg =
+		(const struct gpio_driver_config *)port->config;
+	struct gpio_driver_data *const data =
+		(struct gpio_driver_data *)port->data;
+
+	(void)cfg;
+	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
+		 "Unsupported pin");
+
+	return (bool)!!(BIT(pin) & data->output);
+}
+
 /**
  * @brief Get physical level of all input pins in a port.
  *
